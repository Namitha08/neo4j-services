Index: src/main/java/com/campusconnect/neo4j/da/AddressDao.java
===================================================================
--- src/main/java/com/campusconnect/neo4j/da/AddressDao.java	(revision )
+++ src/main/java/com/campusconnect/neo4j/da/AddressDao.java	(revision )
@@ -1,61 +0,0 @@
-package com.campusconnect.neo4j.da;
-
-import com.campusconnect.neo4j.repositories.AddressRepository;
-import com.campusconnect.neo4j.repositories.BookRepository;
-import com.campusconnect.neo4j.types.Address;
-import com.campusconnect.neo4j.types.AddressType;
-import com.campusconnect.neo4j.types.RelationTypes;
-import com.campusconnect.neo4j.types.User;
-import org.neo4j.graphdb.Node;
-import org.neo4j.graphdb.Relationship;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.data.neo4j.support.Neo4jTemplate;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.util.Map;
-
-/**
- * Created by sn1 on 2/23/15.
- */
-public class AddressDao {
-    
-    @Autowired
-    AddressRepository addressRepository;
-    
-    private Neo4jTemplate neo4jTemplate;
-
-    public AddressDao(Neo4jTemplate neo4jTemplate) {
-        this.neo4jTemplate = neo4jTemplate;
-    }
-    
-    public Address createAddress(Address address) {
-        Address createdAddress = neo4jTemplate.save(address);
-        return createdAddress;
-    }
-    
-    public Address getAddress(Long nodeId) {
-        return addressRepository.findOne(nodeId);
-        
-    }          
-    
-    @Transactional
-    public Address updateAddress(Address address){
-        Address savedAddress = neo4jTemplate.save(address);
-        return savedAddress;
-    }
-    
-    
-    public void linkAddressToUser(User user, Address address, Map<String, Object> properties){
-        Node userNode = neo4jTemplate.getNode(user.getNodeId());
-        Node addressNode = neo4jTemplate.getNode(address.getId());
-        neo4jTemplate.createRelationshipBetween(userNode, addressNode, RelationTypes.HAS_ADDRESS.toString(), properties);
-    }
-    
-    @Transactional
-    public void deleteAddressForUser(User user, Address address){
-        Relationship relationship = neo4jTemplate.getRelationshipBetween(user, address, RelationTypes.HAS_ADDRESS.toString());
-        neo4jTemplate.delete(address);
-        relationship.delete();
-        
-    }
-}
Index: src/main/java/com/campusconnect/neo4j/da/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/campusconnect/neo4j/da/UserDao.java	(revision )
+++ src/main/java/com/campusconnect/neo4j/da/UserDao.java	(revision )
@@ -27,10 +27,7 @@
 
     public User createUser(User user){
         user.setId(UUID.randomUUID().toString());
-        User createdUser = neo4jTemplate.save(user);
-        //Todo:  log the id
-        System.out.println("Saved:" + user);
-        return createdUser;
+        return neo4jTemplate.save(user);
     }
 
     public User getUser(String userId) {
@@ -46,8 +43,7 @@
     }
 
     public User updateUser(User user){
-        User updatedUser = neo4jTemplate.save(user);
-        return updatedUser;
+        return neo4jTemplate.save(user);
     }
 
     public void addCollege(College college, User user, Map<String, Object> properties){
